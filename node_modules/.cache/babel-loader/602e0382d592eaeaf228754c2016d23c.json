{"ast":null,"code":"var _jsxFileName = \"/home/krystian/CodersLab_JavaScript_Brudnopis/Emplyee-App/src/containers/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport '../dev-assets/style.scss';\nimport Employees from '../components/Employees/Employees';\nimport EmployeeDetails from '../components/Employees/EmployeeDetails/EmployeeDetails'; // Pobieranie danych z komponetu Reacta wymaga zastosaowania zaczepów useState, useEffect\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  // Zaczep useState służy do przechowywania odpowiedzi w danych \n  const [employees, setEmployees] = useState([]);\n  const [selectedEmployee, setSelectedEmployee] = useState(null); // w SelectedEmployee przechowywana jest informacja o jednym konkretnym pracowniku, dopóki żaden nie zostanie wybrany będzie wyświetlany 'null'\n  // Zaczep useEffect służy do wykonania żądania\n\n  useEffect(() => {\n    // Na adres puszczam żądanie GET aby dostać listę z pracownikami, która będzie zapisywana w stacie App, która będzie przekazywana do komponentu <Employees/>, najpierw komponenty się wyrenderują a potem zostanie puszczone zapytanie HTTP, po otrzymaniu odpowiedzi asynchronicznie zaktualizuje się nasz stan\n    // (fetch = sprowadzać)\n    fetch('http://dummy.restapiexample.com/api/v1/employees', {\n      method: 'GET' // headers: {\n      //   'Content-Type': 'application/json'\n      // },\n      // body: JSON.stringify({\n      // })\n\n    }).then(res => res.json()).then(res => {\n      console.log(res.data);\n      console.log(res.status);\n      const employeeArray = res.data;\n      console.log(employeeArray, \"employeeArray\"); // W stałej employees zapisuje to co nam zwraca ta metoda\n\n      setEmployees(employeeArray); // Teraz pracownicy z  początkowego stanu tablicy 'useState' employees -> zostają przypsiani do stałej employeeArray\n    }).catch(error => console.log(error));\n  }, []); // Metoda która będzie się wywoływała po wciśnięciu jednego pracownika (wciśnięciu jednego przycisku), przekazywane jest do niej id bo endpoint wymaga id\n\n  const showSelectedEmployeeHandler = id => {\n    console.log(\"Employee nr: \" + id);\n    fetch(\"http://dummy.restapiexample.com/api/v1/employee/\" + id).then(res => {\n      return res.json();\n    }).then(res => {\n      // po przekazaniu argumentu z żądania metoda then określa co ma się stać kiedy otrzyma odpowiedź, która po otrzymaniu przypiszemy do funkcji w stacie\n      console.log(res, \"res po przekazaniu id\");\n      setSelectedEmployee(res.data //Tutaj zaszeregowane będą dane dotyczą imienia, wieku itd.\n      );\n    });\n  };\n\n  const saveEmployeeHandler = () => {\n    // obiekt JavaScriptowy (pracownik) do zapisu\n    const employeeToSave = {\n      \"name\": \"Tomek123\",\n      \"salary\": \"4500\",\n      \"age\": \"25\"\n    }; // Żądanie POST\n\n    fetch(\"http://dummy.restapiexample.com/api/v1/create\", {\n      method: \"POST\",\n      // headers: {\n      //   'Content-Type': 'application/json',\n      // },\n      body: employeeToSave //Dane które będziemy zapisywać,\n      // Jak powinno wyglądać ciało obiektu JavaScriptowego\n\n    }).then(res => {\n      return res.json();\n    }).then(res => console.log(res));\n  };\n\n  const deleteEmployeeHandler = () => {\n    // Będzie wysyłało zapytanie http z id na sztywno wpisanym w kodzie\n    const id = 2; // Stała id obiektu do usunięcia\n\n    fetch(\"http://dummy.restapiexample.com/api/v1/delete/\" + id, {\n      method: 'DELETE'\n    }).then(res => res.json()).then(res => console.log(res)).catch(err => console.log(err));\n  }; // Sprawdzenie aktualnej wartości selectedEmployee, jeżeli będzie różna od zera , to będzie tworzony komponent EmplyeeDetails\n\n\n  if (selectedEmployee !== null) {\n    return /*#__PURE__*/_jsxDEV(EmployeeDetails, {\n      name: selectedEmployee.employee_name,\n      salary: selectedEmployee.employee_salary,\n      age: selectedEmployee.employee_age\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 5\n    }, this);\n  }\n\n  return (\n    /*#__PURE__*/\n    // W <Employees/> odwołuje się do stat-a employess\n    // Dopóki żadne pracownik nie zostanie wybrany będzie wyświetlany null ze stat-a\n    // \"saveEmployeeHandler\" Przycisk który na sztywno wpisuje dane pracownika w kod\n    _jsxDEV(\"div\", {\n      className: \"o-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"o-row\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"App\",\n          children: [selectedEmployee, /*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"Employees\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(Employees, {\n            employees: employees,\n            showSelectedEmployee: showSelectedEmployeeHandler\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: saveEmployeeHandler,\n            className: \"UpdateButton\",\n            children: \"Save Employee\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: deleteEmployeeHandler,\n            className: \"UpdateButton\",\n            children: \"Delete Employee\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this) // W propsach przekazywana jest metoda showSelectedEmployeeHandler nazwa propsa to: 'showSelectedEmployee' \n    // metoda showSelectedEmployeeHandler przekazywana jest do komponentu employees\n\n  );\n};\n\n_s(App, \"kLZeJOXXsMW1g5t7GqZIcKSw2as=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/krystian/CodersLab_JavaScript_Brudnopis/Emplyee-App/src/containers/App.js"],"names":["React","useState","useEffect","Employees","EmployeeDetails","App","employees","setEmployees","selectedEmployee","setSelectedEmployee","fetch","method","then","res","json","console","log","data","status","employeeArray","catch","error","showSelectedEmployeeHandler","id","saveEmployeeHandler","employeeToSave","body","deleteEmployeeHandler","err","employee_name","employee_salary","employee_age"],"mappings":"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","sourcesContent":["import React, {useState, useEffect } from 'react';\nimport '../dev-assets/style.scss';\nimport Employees from '../components/Employees/Employees';\nimport EmployeeDetails from '../components/Employees/EmployeeDetails/EmployeeDetails';\n// Pobieranie danych z komponetu Reacta wymaga zastosaowania zaczepów useState, useEffect\n\nconst App = () => {\n  // Zaczep useState służy do przechowywania odpowiedzi w danych \n  const [employees, setEmployees] = useState([]);\n  const [selectedEmployee, setSelectedEmployee] = useState(null); // w SelectedEmployee przechowywana jest informacja o jednym konkretnym pracowniku, dopóki żaden nie zostanie wybrany będzie wyświetlany 'null'\n\n  // Zaczep useEffect służy do wykonania żądania\n  useEffect(()=> {   \n    // Na adres puszczam żądanie GET aby dostać listę z pracownikami, która będzie zapisywana w stacie App, która będzie przekazywana do komponentu <Employees/>, najpierw komponenty się wyrenderują a potem zostanie puszczone zapytanie HTTP, po otrzymaniu odpowiedzi asynchronicznie zaktualizuje się nasz stan\n    // (fetch = sprowadzać)\n    fetch('http://dummy.restapiexample.com/api/v1/employees', {\n      method: 'GET',\n      // headers: {\n      //   'Content-Type': 'application/json'\n      // },\n      // body: JSON.stringify({\n\n      // })\n    })\n    .then(res => res.json())\n    .then(res => {\n      console.log(res.data);\n      console.log(res.status);\n\n      const employeeArray = res.data;\n      console.log(employeeArray, \"employeeArray\")\n      // W stałej employees zapisuje to co nam zwraca ta metoda\n      setEmployees(employeeArray);\n      // Teraz pracownicy z  początkowego stanu tablicy 'useState' employees -> zostają przypsiani do stałej employeeArray\n    })\n    .catch(error => console.log(error))\n  }, []);\n\n  // Metoda która będzie się wywoływała po wciśnięciu jednego pracownika (wciśnięciu jednego przycisku), przekazywane jest do niej id bo endpoint wymaga id\n  const showSelectedEmployeeHandler = (id) => {\n    console.log(\"Employee nr: \" + id);\n    fetch(\"http://dummy.restapiexample.com/api/v1/employee/\" + id)\n    .then(res => {\n      return res.json()\n    })\n    .then(res => {\n      // po przekazaniu argumentu z żądania metoda then określa co ma się stać kiedy otrzyma odpowiedź, która po otrzymaniu przypiszemy do funkcji w stacie\n      console.log(res, \"res po przekazaniu id\");\n        setSelectedEmployee(res.data\n        //Tutaj zaszeregowane będą dane dotyczą imienia, wieku itd.\n      );\n    });\n  }\n\n  const saveEmployeeHandler = () => {\n    // obiekt JavaScriptowy (pracownik) do zapisu\n    const employeeToSave = {\n      \"name\": \"Tomek123\",\n      \"salary\": \"4500\",\n      \"age\": \"25\"\n    }\n    // Żądanie POST\n    fetch(\"http://dummy.restapiexample.com/api/v1/create\",\n    {\n      method: \"POST\",\n      // headers: {\n      //   'Content-Type': 'application/json',\n      // },\n      body: employeeToSave//Dane które będziemy zapisywać,\n      // Jak powinno wyglądać ciało obiektu JavaScriptowego\n    })\n    .then(res => {\n      return res.json();\n    })\n    .then(res => console.log(res));\n  }\n\n  const deleteEmployeeHandler = () => {\n    // Będzie wysyłało zapytanie http z id na sztywno wpisanym w kodzie\n    const id = 2; // Stała id obiektu do usunięcia\n    fetch(\"http://dummy.restapiexample.com/api/v1/delete/\" + id, {\n      method: 'DELETE'\n    })  \n    .then(res => res.json())\n    .then(res => console.log(res))\n    .catch(err => console.log(err))\n  }\n  // Sprawdzenie aktualnej wartości selectedEmployee, jeżeli będzie różna od zera , to będzie tworzony komponent EmplyeeDetails\n  if(selectedEmployee !== null){ \n    return (\n    <EmployeeDetails \n    name={selectedEmployee.employee_name}\n    salary={selectedEmployee.employee_salary}\n    age={selectedEmployee.employee_age}\n    /> )\n  }\n\n  return (\n// W <Employees/> odwołuje się do stat-a employess\n// Dopóki żadne pracownik nie zostanie wybrany będzie wyświetlany null ze stat-a\n      // \"saveEmployeeHandler\" Przycisk który na sztywno wpisuje dane pracownika w kod\n      <div className='o-container'>\n        <div className='o-row'>\n      <div className='App'> \n        {selectedEmployee}\n        <h1>Employees</h1>\n        <Employees employees={employees} showSelectedEmployee={showSelectedEmployeeHandler}/>\n        <button onClick={saveEmployeeHandler} className=\"UpdateButton\">Save Employee</button>\n        <button onClick={deleteEmployeeHandler} className=\"UpdateButton\">Delete Employee</button>\n          </div>\n        </div>\n      </div>\n        // W propsach przekazywana jest metoda showSelectedEmployeeHandler nazwa propsa to: 'showSelectedEmployee' \n        // metoda showSelectedEmployeeHandler przekazywana jest do komponentu employees\n    );\n  }\n\nexport default App;"]},"metadata":{},"sourceType":"module"}