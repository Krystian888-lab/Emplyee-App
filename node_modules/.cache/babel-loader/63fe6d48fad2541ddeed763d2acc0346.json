{"ast":null,"code":"import _slicedToArray from\"/home/krystian/Coders_Lab/Krystian_Projekty/Emplyee-App/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import'../dev-assets/style.scss';import Employees from'../components/Employees/Employees';import EmployeeDetails from'../components/Employees/EmployeeDetails/EmployeeDetails';// Pobieranie danych z komponetu Reacta wymaga zastosaowania zaczepów useState, useEffect\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var App=function App(){// Zaczep useState służy do przechowywania odpowiedzi w danych \nvar _useState=useState(null),_useState2=_slicedToArray(_useState,2),selectedEmployee=_useState2[0],setSelectedEmployee=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),employees=_useState4[0],setEmployees=_useState4[1];var _useState5=useState(),_useState6=_slicedToArray(_useState5,2),error=_useState6[0],setError=_useState6[1];// Obiekt error, dla monitorowania błedów\nvar _useState7=useState(false),_useState8=_slicedToArray(_useState7,2),loading=_useState8[0],setLoading=_useState8[1];// Gdy żądanie ma status w toku w elemencie h1 wyświetlany jest jest komunikat wczytywanie\n// w SelectedEmployee przechowywana jest informacja o jednym konkretnym pracowniku, dopóki żaden nie zostanie wybrany będzie wyświetlany 'null'\n// Zaczep useEffect służy do wykonania żądania\nuseEffect(function(){// Na adres puszczam żądanie GET aby dostać listę z pracownikami, która będzie zapisywana w stacie App, która będzie przekazywana do komponentu <Employees/>, najpierw komponenty się wyrenderują a potem zostanie puszczone zapytanie HTTP, po otrzymaniu odpowiedzi asynchronicznie zaktualizuje się nasz stan\n// (fetch = sprowadzać)\nfetch('http://dummy.restapiexample.com/api/v1/employees',{method:'GET'// headers: {\n//   'Content-Type': 'application/json'\n// },\n// body: JSON.stringify({\n// })\n}).then(function(res){return res.json();}).then(function(res){console.log(res.data);console.log(res.status);var employeeArray=res.data;console.log(employeeArray,\"employeeArray\");// W stałej employees zapisuje to co nam zwraca ta metoda\nsetEmployees(employeeArray);// Teraz pracownicy z  początkowego stanu tablicy 'useState' employees -> zostają przypsiani do stałej employeeArray\n}).then(function(){return setLoading(false);}).catch(setError).catch(function(error){return console.log(error);});},[]);if(loading)return/*#__PURE__*/_jsx(\"h1\",{children:\"loading...\"});if(error)return/*#__PURE__*/_jsx(\"pre\",{children:JSON.stringify(error,null,2)});if(!employees)return null;// Metoda która będzie się wywoływała po wciśnięciu jednego pracownika (wciśnięciu jednego przycisku), przekazywane jest do niej id bo endpoint wymaga id\nvar showSelectedEmployeeHandler=function showSelectedEmployeeHandler(id){console.log(\"Employee nr: \"+id);fetch(\"http://dummy.restapiexample.com/api/v1/employee/\"+id).then(function(res){return res.json();}).then(function(res){// po przekazaniu argumentu z żądania metoda then określa co ma się stać kiedy otrzyma odpowiedź, która po otrzymaniu przypiszemy do funkcji w stacie\nconsole.log(res,\"res po przekazaniu id\");setSelectedEmployee(res.data//Tutaj zaszeregowane będą dane dotyczą imienia, wieku itd.\n);});};var saveEmployeeHandler=function saveEmployeeHandler(){// obiekt JavaScriptowy (pracownik) do zapisu\nvar employeeToSave={\"name\":\"Tomek123\",\"salary\":\"4500\",\"age\":\"25\"};// Żądanie POST\nfetch(\"http://dummy.restapiexample.com/api/v1/create\",{method:\"POST\",// headers: {\n//   'Content-Type': 'application/json',\n// },\nbody:employeeToSave//Dane które będziemy zapisywać,\n// Jak powinno wyglądać ciało obiektu JavaScriptowego\n}).then(function(res){return res.json();}).then(function(res){return console.log(res);});};var deleteEmployeeHandler=function deleteEmployeeHandler(){// Będzie wysyłało zapytanie http z id na sztywno wpisanym w kodzie\nvar id=2;// Stała id obiektu do usunięcia\nfetch(\"http://dummy.restapiexample.com/api/v1/delete/\"+id,{method:'DELETE'}).then(function(res){return res.json();}).then(function(res){return console.log(res);}).catch(function(err){return console.log(err);});};// Sprawdzenie aktualnej wartości selectedEmployee, jeżeli będzie różna od zera , to będzie tworzony komponent EmplyeeDetails\nif(selectedEmployee!==null){return/*#__PURE__*/_jsx(EmployeeDetails,{name:selectedEmployee.employee_name,salary:selectedEmployee.employee_salary,age:selectedEmployee.employee_age});}return/*#__PURE__*/ (// W <Employees/> odwołuje się do stat-a employess\n// Dopóki żadne pracownik nie zostanie wybrany będzie wyświetlany null ze stat-a\n// \"saveEmployeeHandler\" Przycisk który na sztywno wpisuje dane pracownika w kod\n_jsx(\"main\",{className:\"t-site-header\",children:/*#__PURE__*/_jsxs(\"section\",{className:\"o-container\",children:[selectedEmployee,/*#__PURE__*/_jsx(\"h1\",{className:\"c-heading c-heading--level1 c-heading--white\",children:\"Employees\"}),/*#__PURE__*/_jsx(Employees,{employees:employees,showSelectedEmployee:showSelectedEmployeeHandler}),/*#__PURE__*/_jsxs(\"div\",{className:\"t-post-list\",children:[/*#__PURE__*/_jsx(\"button\",{onClick:saveEmployeeHandler,className:\"c-btn c-btn--accent\",children:\"Save Employee\"}),/*#__PURE__*/_jsx(\"span\",{className:\"t-post-list__divider\",children:\"OR\"}),/*#__PURE__*/_jsx(\"button\",{onClick:deleteEmployeeHandler,className:\"c-btn c-btn--outline\",children:\"Delete Employee\"})]})]})})// W propsach przekazywana jest metoda showSelectedEmployeeHandler nazwa propsa to: 'showSelectedEmployee' \n// metoda showSelectedEmployeeHandler przekazywana jest do komponentu employees\n);};export default App;","map":{"version":3,"sources":["/home/krystian/Coders_Lab/Krystian_Projekty/Emplyee-App/src/containers/App.js"],"names":["React","useState","useEffect","Employees","EmployeeDetails","App","selectedEmployee","setSelectedEmployee","employees","setEmployees","error","setError","loading","setLoading","fetch","method","then","res","json","console","log","data","status","employeeArray","catch","JSON","stringify","showSelectedEmployeeHandler","id","saveEmployeeHandler","employeeToSave","body","deleteEmployeeHandler","err","employee_name","employee_salary","employee_age"],"mappings":"0IAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,CACA,MAAO,0BAAP,CACA,MAAOC,CAAAA,SAAP,KAAsB,mCAAtB,CACA,MAAOC,CAAAA,eAAP,KAA4B,yDAA5B,CACA;wFAEA,GAAMC,CAAAA,GAAG,CAAG,QAANA,CAAAA,GAAM,EAAM,CACjB;AACA,cAAgDJ,QAAQ,CAAC,IAAD,CAAxD,wCAAOK,gBAAP,eAAyBC,mBAAzB,eAEA,eAAkCN,QAAQ,CAAC,EAAD,CAA1C,yCAAOO,SAAP,eAAkBC,YAAlB,eAEA,eAA0BR,QAAQ,EAAlC,yCAAOS,KAAP,eAAcC,QAAd,eAAsC;AACtC,eAA8BV,QAAQ,CAAC,KAAD,CAAtC,yCAAOW,OAAP,eAAgBC,UAAhB,eACA;AAEA;AAEA;AACAX,SAAS,CAAC,UAAM,CACf;AACA;AACAY,KAAK,CACH,kDADG,CACiD,CACpDC,MAAM,CAAE,KACR;AACA;AACA;AACA;AAEA;AAPoD,CADjD,CAAL,CAUEC,IAVF,CAUO,SAAAC,GAAG,QAAIA,CAAAA,GAAG,CAACC,IAAJ,EAAJ,EAVV,EAWEF,IAXF,CAWO,SAAAC,GAAG,CAAI,CACZE,OAAO,CAACC,GAAR,CAAYH,GAAG,CAACI,IAAhB,EACAF,OAAO,CAACC,GAAR,CAAYH,GAAG,CAACK,MAAhB,EAEA,GAAMC,CAAAA,aAAa,CAAGN,GAAG,CAACI,IAA1B,CACAF,OAAO,CAACC,GAAR,CAAYG,aAAZ,CAA2B,eAA3B,EACA;AACAd,YAAY,CAACc,aAAD,CAAZ,CACA;AACA,CApBF,EAqBEP,IArBF,CAqBO,iBAAMH,CAAAA,UAAU,CAAC,KAAD,CAAhB,EArBP,EAsBEW,KAtBF,CAsBQb,QAtBR,EAuBEa,KAvBF,CAuBQ,SAAAd,KAAK,QAAIS,CAAAA,OAAO,CAACC,GAAR,CAAYV,KAAZ,CAAJ,EAvBb,EAyBA,CA5BQ,CA4BN,EA5BM,CAAT,CA8BA,GAAIE,OAAJ,CAAa,mBAAO,kCAAP,CACb,GAAIF,KAAJ,CAAW,mBAAO,qBAAMe,IAAI,CAACC,SAAL,CAAehB,KAAf,CAAsB,IAAtB,CAA4B,CAA5B,CAAN,EAAP,CACX,GAAI,CAACF,SAAL,CAAgB,MAAO,KAAP,CAEhB;AACA,GAAMmB,CAAAA,2BAA2B,CAAG,QAA9BA,CAAAA,2BAA8B,CAACC,EAAD,CAAQ,CAC3CT,OAAO,CAACC,GAAR,CAAY,gBAAkBQ,EAA9B,EACAd,KAAK,CAAC,mDAAqDc,EAAtD,CAAL,CACEZ,IADF,CACO,SAAAC,GAAG,CAAI,CACZ,MAAOA,CAAAA,GAAG,CAACC,IAAJ,EAAP,CACA,CAHF,EAIEF,IAJF,CAIO,SAAAC,GAAG,CAAI,CACZ;AACAE,OAAO,CAACC,GAAR,CAAYH,GAAZ,CAAiB,uBAAjB,EACAV,mBAAmB,CAACU,GAAG,CAACI,IACvB;AADkB,CAAnB,CAGA,CAVF,EAWA,CAbD,CAeA,GAAMQ,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,EAAM,CACjC;AACA,GAAMC,CAAAA,cAAc,CAAG,CACtB,OAAQ,UADc,CAEtB,SAAU,MAFY,CAGtB,MAAO,IAHe,CAAvB,CAKA;AACAhB,KAAK,CAAC,+CAAD,CACJ,CACCC,MAAM,CAAE,MADT,CAEC;AACA;AACA;AACAgB,IAAI,CAAED,cAAc;AACpB;AAND,CADI,CAAL,CASEd,IATF,CASO,SAAAC,GAAG,CAAI,CACZ,MAAOA,CAAAA,GAAG,CAACC,IAAJ,EAAP,CACA,CAXF,EAYEF,IAZF,CAYO,SAAAC,GAAG,QAAIE,CAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ,CAAJ,EAZV,EAaA,CArBD,CAuBA,GAAMe,CAAAA,qBAAqB,CAAG,QAAxBA,CAAAA,qBAAwB,EAAM,CACnC;AACA,GAAMJ,CAAAA,EAAE,CAAG,CAAX,CAAc;AACdd,KAAK,CAAC,iDAAmDc,EAApD,CAAwD,CAC5Db,MAAM,CAAE,QADoD,CAAxD,CAAL,CAGEC,IAHF,CAGO,SAAAC,GAAG,QAAIA,CAAAA,GAAG,CAACC,IAAJ,EAAJ,EAHV,EAIEF,IAJF,CAIO,SAAAC,GAAG,QAAIE,CAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ,CAAJ,EAJV,EAKEO,KALF,CAKQ,SAAAS,GAAG,QAAId,CAAAA,OAAO,CAACC,GAAR,CAAYa,GAAZ,CAAJ,EALX,EAMA,CATD,CAUA;AACA,GAAI3B,gBAAgB,GAAK,IAAzB,CAA+B,CAC9B,mBACC,KAAC,eAAD,EACC,IAAI,CAAEA,gBAAgB,CAAC4B,aADxB,CAEC,MAAM,CAAE5B,gBAAgB,CAAC6B,eAF1B,CAGC,GAAG,CAAE7B,gBAAgB,CAAC8B,YAHvB,EADD,CAMA,CAED,oBACC;AACA;AACA;AACA,aAAM,SAAS,CAAC,eAAhB,uBACC,iBAAS,SAAS,CAAC,aAAnB,WACE9B,gBADF,cAEC,WAAI,SAAS,CAAC,8CAAd,uBAFD,cAIC,KAAC,SAAD,EAAW,SAAS,CAAEE,SAAtB,CAAiC,oBAAoB,CAAEmB,2BAAvD,EAJD,cAKC,aAAK,SAAS,CAAC,aAAf,wBACC,eAAQ,OAAO,CAAEE,mBAAjB,CAAsC,SAAS,CAAC,qBAAhD,2BADD,cAEC,aAAM,SAAS,CAAC,sBAAhB,gBAFD,cAGC,eAAQ,OAAO,CAAEG,qBAAjB,CAAwC,SAAS,CAAC,sBAAlD,6BAHD,GALD,GADD,EAaA;AACA;AAlBD,EAoBA,CA9HD,CAgIA,cAAe3B,CAAAA,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport '../dev-assets/style.scss';\nimport Employees from '../components/Employees/Employees';\nimport EmployeeDetails from '../components/Employees/EmployeeDetails/EmployeeDetails';\n// Pobieranie danych z komponetu Reacta wymaga zastosaowania zaczepów useState, useEffect\n\nconst App = () => {\n // Zaczep useState służy do przechowywania odpowiedzi w danych \n const [selectedEmployee, setSelectedEmployee] = useState(null);\n\n const [employees, setEmployees] = useState([]);\n\n const [error, setError] = useState(); // Obiekt error, dla monitorowania błedów\n const [loading, setLoading] = useState(false);\n // Gdy żądanie ma status w toku w elemencie h1 wyświetlany jest jest komunikat wczytywanie\n\n // w SelectedEmployee przechowywana jest informacja o jednym konkretnym pracowniku, dopóki żaden nie zostanie wybrany będzie wyświetlany 'null'\n\n // Zaczep useEffect służy do wykonania żądania\n useEffect(() => {\n  // Na adres puszczam żądanie GET aby dostać listę z pracownikami, która będzie zapisywana w stacie App, która będzie przekazywana do komponentu <Employees/>, najpierw komponenty się wyrenderują a potem zostanie puszczone zapytanie HTTP, po otrzymaniu odpowiedzi asynchronicznie zaktualizuje się nasz stan\n  // (fetch = sprowadzać)\n  fetch\n   ('http://dummy.restapiexample.com/api/v1/employees', {\n    method: 'GET',\n    // headers: {\n    //   'Content-Type': 'application/json'\n    // },\n    // body: JSON.stringify({\n\n    // })\n   })\n   .then(res => res.json())\n   .then(res => {\n    console.log(res.data);\n    console.log(res.status);\n\n    const employeeArray = res.data;\n    console.log(employeeArray, \"employeeArray\")\n    // W stałej employees zapisuje to co nam zwraca ta metoda\n    setEmployees(employeeArray);\n    // Teraz pracownicy z  początkowego stanu tablicy 'useState' employees -> zostają przypsiani do stałej employeeArray\n   })\n   .then(() => setLoading(false))\n   .catch(setError)\n   .catch(error => console.log(error))\n\n }, []);\n\n if (loading) return <h1>loading...</h1>;\n if (error) return <pre>{JSON.stringify(error, null, 2)}</pre>;\n if (!employees) return null;\n\n // Metoda która będzie się wywoływała po wciśnięciu jednego pracownika (wciśnięciu jednego przycisku), przekazywane jest do niej id bo endpoint wymaga id\n const showSelectedEmployeeHandler = (id) => {\n  console.log(\"Employee nr: \" + id);\n  fetch(\"http://dummy.restapiexample.com/api/v1/employee/\" + id)\n   .then(res => {\n    return res.json()\n   })\n   .then(res => {\n    // po przekazaniu argumentu z żądania metoda then określa co ma się stać kiedy otrzyma odpowiedź, która po otrzymaniu przypiszemy do funkcji w stacie\n    console.log(res, \"res po przekazaniu id\");\n    setSelectedEmployee(res.data\n     //Tutaj zaszeregowane będą dane dotyczą imienia, wieku itd.\n    );\n   });\n }\n\n const saveEmployeeHandler = () => {\n  // obiekt JavaScriptowy (pracownik) do zapisu\n  const employeeToSave = {\n   \"name\": \"Tomek123\",\n   \"salary\": \"4500\",\n   \"age\": \"25\"\n  }\n  // Żądanie POST\n  fetch(\"http://dummy.restapiexample.com/api/v1/create\",\n   {\n    method: \"POST\",\n    // headers: {\n    //   'Content-Type': 'application/json',\n    // },\n    body: employeeToSave//Dane które będziemy zapisywać,\n    // Jak powinno wyglądać ciało obiektu JavaScriptowego\n   })\n   .then(res => {\n    return res.json();\n   })\n   .then(res => console.log(res));\n }\n\n const deleteEmployeeHandler = () => {\n  // Będzie wysyłało zapytanie http z id na sztywno wpisanym w kodzie\n  const id = 2; // Stała id obiektu do usunięcia\n  fetch(\"http://dummy.restapiexample.com/api/v1/delete/\" + id, {\n   method: 'DELETE'\n  })\n   .then(res => res.json())\n   .then(res => console.log(res))\n   .catch(err => console.log(err))\n }\n // Sprawdzenie aktualnej wartości selectedEmployee, jeżeli będzie różna od zera , to będzie tworzony komponent EmplyeeDetails\n if (selectedEmployee !== null) {\n  return (\n   <EmployeeDetails\n    name={selectedEmployee.employee_name}\n    salary={selectedEmployee.employee_salary}\n    age={selectedEmployee.employee_age}\n   />)\n }\n\n return (\n  // W <Employees/> odwołuje się do stat-a employess\n  // Dopóki żadne pracownik nie zostanie wybrany będzie wyświetlany null ze stat-a\n  // \"saveEmployeeHandler\" Przycisk który na sztywno wpisuje dane pracownika w kod\n  <main className='t-site-header'>\n   <section className='o-container'>\n    {selectedEmployee}\n    <h1 className='c-heading c-heading--level1 c-heading--white'>Employees</h1>\n\n    <Employees employees={employees} showSelectedEmployee={showSelectedEmployeeHandler} />\n    <div className='t-post-list'>\n     <button onClick={saveEmployeeHandler} className='c-btn c-btn--accent'>Save Employee</button>\n     <span className=\"t-post-list__divider\">OR</span>\n     <button onClick={deleteEmployeeHandler} className='c-btn c-btn--outline'>Delete Employee</button>\n    </div>\n   </section>\n  </main>\n  // W propsach przekazywana jest metoda showSelectedEmployeeHandler nazwa propsa to: 'showSelectedEmployee' \n  // metoda showSelectedEmployeeHandler przekazywana jest do komponentu employees\n );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}