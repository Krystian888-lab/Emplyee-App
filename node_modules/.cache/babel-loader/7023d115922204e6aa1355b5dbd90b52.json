{"ast":null,"code":"var _jsxFileName = \"/home/krystian/CodersLab_JavaScript_Brudnopis/Emplyee-App/src/containers/Fetch.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction useFetch(uri) {\n  _s();\n\n  // const [data, setData] = useState();\n  const [error, setError] = useState();\n  const [loading, setLoading] = useState(true);\n  const [employees, setEmployees] = useState([]);\n  useEffect(() => {\n    if (!uri) return;\n    fetch(uri) // .then(data => data.json())\n    // .then(setData)\n    .then(res => res.json()).then(res => {\n      console.log(res.data);\n      console.log(res.status);\n      const employeeArray = res.data;\n      console.log(employeeArray, \"employeeArray\"); // W stałej employees zapisuje to co nam zwraca ta metoda\n\n      setEmployees(employeeArray); // Teraz pracownicy z  początkowego stanu tablicy 'useState' employees -> zostają przypsiani do stałej employeeArray\n    }).then(() => setLoading(false)).catch(setError).catch(error => console.log(error));\n  }, [uri]);\n  return {\n    loading,\n    // data,\n    error\n  };\n}\n\n_s(useFetch, \"OO+xkZ2P5JNGQC3J5QTnTVSPl7Y=\");\n\nexport default function Fetch({\n  uri,\n  // renderSuccess,\n  loadingFallback = /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 21\n  }, this),\n  renderError = error => /*#__PURE__*/_jsxDEV(\"pre\", {\n    children: JSON.stringify(error, null, 2)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 26\n  }, this)\n}) {\n  _s2();\n\n  const {\n    loading,\n    error\n  } = useFetch(uri);\n  if (loading) return loadingFallback;\n  if (error) return renderError(error); // if (data) return renderSuccess({ data });\n}\n\n_s2(Fetch, \"SFBgfwenF7o2opXfVfyWPFCNmg4=\", false, function () {\n  return [useFetch];\n});\n\n_c = Fetch;\n\nvar _c;\n\n$RefreshReg$(_c, \"Fetch\");","map":{"version":3,"sources":["/home/krystian/CodersLab_JavaScript_Brudnopis/Emplyee-App/src/containers/Fetch.js"],"names":["React","useState","useEffect","useFetch","uri","error","setError","loading","setLoading","employees","setEmployees","fetch","then","res","json","console","log","data","status","employeeArray","catch","Fetch","loadingFallback","renderError","JSON","stringify"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;;AAEA,SAASC,QAAT,CAAkBC,GAAlB,EAAuB;AAAA;;AACrB;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,EAAlC;AACA,QAAM,CAACM,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACQ,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAC,EAAD,CAA1C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACE,GAAL,EAAU;AACVO,IAAAA,KAAK,CAACP,GAAD,CAAL,CACE;AACA;AAFF,KAIGQ,IAJH,CAIQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAJf,EAKCF,IALD,CAKMC,GAAG,IAAI;AACXE,MAAAA,OAAO,CAACC,GAAR,CAAYH,GAAG,CAACI,IAAhB;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAYH,GAAG,CAACK,MAAhB;AAEA,YAAMC,aAAa,GAAGN,GAAG,CAACI,IAA1B;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAYG,aAAZ,EAA2B,eAA3B,EALW,CAMX;;AACAT,MAAAA,YAAY,CAACS,aAAD,CAAZ,CAPW,CAQX;AACD,KAdD,EAgBGP,IAhBH,CAgBQ,MAAMJ,UAAU,CAAC,KAAD,CAhBxB,EAiBGY,KAjBH,CAiBSd,QAjBT,EAkBGc,KAlBH,CAkBSf,KAAK,IAAIU,OAAO,CAACC,GAAR,CAAYX,KAAZ,CAlBlB;AAmBD,GArBQ,EAqBN,CAACD,GAAD,CArBM,CAAT;AAuBA,SAAO;AACLG,IAAAA,OADK;AAEL;AACAF,IAAAA;AAHK,GAAP;AAKD;;GAlCQF,Q;;AAoCT,eAAe,SAASkB,KAAT,CAAe;AAC5BjB,EAAAA,GAD4B;AAE5B;AACAkB,EAAAA,eAAe,gBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAHU;AAI5BC,EAAAA,WAAW,GAAGlB,KAAK,iBAAI;AAAA,cAAMmB,IAAI,CAACC,SAAL,CAAepB,KAAf,EAAsB,IAAtB,EAA4B,CAA5B;AAAN;AAAA;AAAA;AAAA;AAAA;AAJK,CAAf,EAKZ;AAAA;;AACD,QAAM;AAAEE,IAAAA,OAAF;AAAWF,IAAAA;AAAX,MAAqBF,QAAQ,CAACC,GAAD,CAAnC;AACA,MAAIG,OAAJ,EAAa,OAAOe,eAAP;AACb,MAAIjB,KAAJ,EAAW,OAAOkB,WAAW,CAAClB,KAAD,CAAlB,CAHV,CAID;AACD;;IAVuBgB,K;UAMKlB,Q;;;KANLkB,K","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nfunction useFetch(uri) {\n  // const [data, setData] = useState();\n  const [error, setError] = useState();\n  const [loading, setLoading] = useState(true);\n  const [employees, setEmployees] = useState([]);\n\n  useEffect(() => {\n    if (!uri) return;\n    fetch(uri)\n      // .then(data => data.json())\n      // .then(setData)\n\n      .then(res => res.json())\n    .then(res => {\n      console.log(res.data);\n      console.log(res.status);\n\n      const employeeArray = res.data;\n      console.log(employeeArray, \"employeeArray\")\n      // W stałej employees zapisuje to co nam zwraca ta metoda\n      setEmployees(employeeArray);\n      // Teraz pracownicy z  początkowego stanu tablicy 'useState' employees -> zostają przypsiani do stałej employeeArray\n    })\n\n      .then(() => setLoading(false))\n      .catch(setError)\n      .catch(error => console.log(error));\n  }, [uri]);\n\n  return {\n    loading,\n    // data,\n    error\n  };\n}\n\nexport default function Fetch({\n  uri,\n  // renderSuccess,\n  loadingFallback = <p>loading...</p>,\n  renderError = error => <pre>{JSON.stringify(error, null, 2)}</pre>\n}) {\n  const { loading, error } = useFetch(uri);\n  if (loading) return loadingFallback;\n  if (error) return renderError(error);\n  // if (data) return renderSuccess({ data });\n}"]},"metadata":{},"sourceType":"module"}