{"ast":null,"code":"var _jsxFileName = \"/home/krystian/Coders_Lab/Krystian_Projekty/Emplyee-App/src/containers/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport '../dev-assets/style.scss';\nimport Employees from '../components/Employees/Employees';\nimport EmployeeDetails from '../components/Employees/EmployeeDetails/EmployeeDetails'; // Pobieranie danych z komponetu Reacta wymaga zastosaowania zaczepów useState, useEffect\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  // Zaczep useState służy do przechowywania odpowiedzi w danych \n  const [selectedEmployee, setSelectedEmployee] = useState(null);\n  const [employees, setEmployees] = useState([]);\n  const [error, setError] = useState(); // Obiekt error, dla monitorowania błedów\n\n  const [loading, setLoading] = useState(false); // Gdy żądanie ma status w toku w elemencie h1 wyświetlany jest jest komunikat wczytywanie\n  // w SelectedEmployee przechowywana jest informacja o jednym konkretnym pracowniku, dopóki żaden nie zostanie wybrany będzie wyświetlany 'null'\n  // Zaczep useEffect służy do wykonania żądania\n\n  useEffect(() => {\n    // Na adres puszczam żądanie GET aby dostać listę z pracownikami, która będzie zapisywana w stacie App, która będzie przekazywana do komponentu <Employees/>, najpierw komponenty się wyrenderują a potem zostanie puszczone zapytanie HTTP, po otrzymaniu odpowiedzi asynchronicznie zaktualizuje się nasz stan\n    // (fetch = sprowadzać)\n    fetch('http://dummy.restapiexample.com/api/v1/employees', {\n      method: 'GET' // headers: {\n      //   'Content-Type': 'application/json'\n      // },\n      // body: JSON.stringify({\n      // })\n\n    }).then(res => res.json()).then(res => {\n      console.log(res.data);\n      console.log(res.status);\n      const employeeArray = res.data;\n      console.log(employeeArray, \"employeeArray\"); // W stałej employees zapisuje to co nam zwraca ta metoda\n\n      setEmployees(employeeArray); // Teraz pracownicy z  początkowego stanu tablicy 'useState' employees -> zostają przypsiani do stałej employeeArray\n    }).then(() => setLoading(false)).catch(setError).catch(error => console.log(error));\n  }, []);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 22\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"pre\", {\n    children: JSON.stringify(error, null, 2)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 20\n  }, this);\n  if (!employees) return null; // Metoda która będzie się wywoływała po wciśnięciu jednego pracownika (wciśnięciu jednego przycisku), przekazywane jest do niej id bo endpoint wymaga id\n\n  const showSelectedEmployeeHandler = id => {\n    console.log(\"Employee nr: \" + id);\n    fetch(\"http://dummy.restapiexample.com/api/v1/employee/\" + id).then(res => {\n      return res.json();\n    }).then(res => {\n      // po przekazaniu argumentu z żądania metoda then określa co ma się stać kiedy otrzyma odpowiedź, która po otrzymaniu przypiszemy do funkcji w stacie\n      console.log(res, \"res po przekazaniu id\");\n      setSelectedEmployee(res.data //Tutaj zaszeregowane będą dane dotyczą imienia, wieku itd.\n      );\n    });\n  };\n\n  const saveEmployeeHandler = () => {\n    // obiekt JavaScriptowy (pracownik) do zapisu\n    const employeeToSave = {\n      \"name\": \"Tomek123\",\n      \"salary\": \"4500\",\n      \"age\": \"25\"\n    }; // Żądanie POST\n\n    fetch(\"http://dummy.restapiexample.com/api/v1/create\", {\n      method: \"POST\",\n      // headers: {\n      //   'Content-Type': 'application/json',\n      // },\n      body: employeeToSave //Dane które będziemy zapisywać,\n      // Jak powinno wyglądać ciało obiektu JavaScriptowego\n\n    }).then(res => {\n      return res.json();\n    }).then(res => console.log(res));\n  };\n\n  const deleteEmployeeHandler = () => {\n    // Będzie wysyłało zapytanie http z id na sztywno wpisanym w kodzie\n    const id = 2; // Stała id obiektu do usunięcia\n\n    fetch(\"http://dummy.restapiexample.com/api/v1/delete/\" + id, {\n      method: 'DELETE'\n    }).then(res => res.json()).then(res => console.log(res)).catch(err => console.log(err));\n  }; // Sprawdzenie aktualnej wartości selectedEmployee, jeżeli będzie różna od zera , to będzie tworzony komponent EmplyeeDetails\n\n\n  if (selectedEmployee !== null) {\n    return /*#__PURE__*/_jsxDEV(EmployeeDetails, {\n      name: selectedEmployee.employee_name,\n      salary: selectedEmployee.employee_salary,\n      age: selectedEmployee.employee_age\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 4\n    }, this);\n  }\n\n  return (\n    /*#__PURE__*/\n    // W <Employees/> odwołuje się do stat-a employess\n    // Dopóki żadne pracownik nie zostanie wybrany będzie wyświetlany null ze stat-a\n    // \"saveEmployeeHandler\" Przycisk który na sztywno wpisuje dane pracownika w kod\n    _jsxDEV(\"main\", {\n      className: \"t-site-header\",\n      children: /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"o-container\",\n        children: [selectedEmployee, /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"c-heading c-heading--level1 c-heading--white\",\n          children: \"Employees\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(Employees, {\n          employees: employees,\n          showSelectedEmployee: showSelectedEmployeeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"t-post-list\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: saveEmployeeHandler,\n            className: \"c-btn c-btn--accent\",\n            children: \"Save Employee\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 6\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"t-post-list__divider\",\n            children: \"OR\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 6\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: deleteEmployeeHandler,\n            className: \"c-btn c-btn--outline\",\n            children: \"Delete Employee\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 6\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 4\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 3\n    }, this) // W propsach przekazywana jest metoda showSelectedEmployeeHandler nazwa propsa to: 'showSelectedEmployee' \n    // metoda showSelectedEmployeeHandler przekazywana jest do komponentu employees\n\n  );\n};\n\n_s(App, \"jVy9n/SD/n5dsbg3glwf9rPuUHs=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/krystian/Coders_Lab/Krystian_Projekty/Emplyee-App/src/containers/App.js"],"names":["React","useState","useEffect","Employees","EmployeeDetails","App","selectedEmployee","setSelectedEmployee","employees","setEmployees","error","setError","loading","setLoading","fetch","method","then","res","json","console","log","data","status","employeeArray","catch","JSON","stringify","showSelectedEmployeeHandler","id","saveEmployeeHandler","employeeToSave","body","deleteEmployeeHandler","err","employee_name","employee_salary","employee_age"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport '../dev-assets/style.scss';\nimport Employees from '../components/Employees/Employees';\nimport EmployeeDetails from '../components/Employees/EmployeeDetails/EmployeeDetails';\n// Pobieranie danych z komponetu Reacta wymaga zastosaowania zaczepów useState, useEffect\n\nconst App = () => {\n // Zaczep useState służy do przechowywania odpowiedzi w danych \n const [selectedEmployee, setSelectedEmployee] = useState(null);\n\n const [employees, setEmployees] = useState([]);\n\n const [error, setError] = useState(); // Obiekt error, dla monitorowania błedów\n const [loading, setLoading] = useState(false);\n // Gdy żądanie ma status w toku w elemencie h1 wyświetlany jest jest komunikat wczytywanie\n\n // w SelectedEmployee przechowywana jest informacja o jednym konkretnym pracowniku, dopóki żaden nie zostanie wybrany będzie wyświetlany 'null'\n\n // Zaczep useEffect służy do wykonania żądania\n useEffect(() => {\n  // Na adres puszczam żądanie GET aby dostać listę z pracownikami, która będzie zapisywana w stacie App, która będzie przekazywana do komponentu <Employees/>, najpierw komponenty się wyrenderują a potem zostanie puszczone zapytanie HTTP, po otrzymaniu odpowiedzi asynchronicznie zaktualizuje się nasz stan\n  // (fetch = sprowadzać)\n  fetch\n   ('http://dummy.restapiexample.com/api/v1/employees', {\n    method: 'GET',\n    // headers: {\n    //   'Content-Type': 'application/json'\n    // },\n    // body: JSON.stringify({\n\n    // })\n   })\n   .then(res => res.json())\n   .then(res => {\n    console.log(res.data);\n    console.log(res.status);\n\n    const employeeArray = res.data;\n    console.log(employeeArray, \"employeeArray\")\n    // W stałej employees zapisuje to co nam zwraca ta metoda\n    setEmployees(employeeArray);\n    // Teraz pracownicy z  początkowego stanu tablicy 'useState' employees -> zostają przypsiani do stałej employeeArray\n   })\n   .then(() => setLoading(false))\n   .catch(setError)\n   .catch(error => console.log(error))\n\n }, []);\n\n if (loading) return <h1>loading...</h1>;\n if (error) return <pre>{JSON.stringify(error, null, 2)}</pre>;\n if (!employees) return null;\n\n // Metoda która będzie się wywoływała po wciśnięciu jednego pracownika (wciśnięciu jednego przycisku), przekazywane jest do niej id bo endpoint wymaga id\n const showSelectedEmployeeHandler = (id) => {\n  console.log(\"Employee nr: \" + id);\n  fetch(\"http://dummy.restapiexample.com/api/v1/employee/\" + id)\n   .then(res => {\n    return res.json()\n   })\n   .then(res => {\n    // po przekazaniu argumentu z żądania metoda then określa co ma się stać kiedy otrzyma odpowiedź, która po otrzymaniu przypiszemy do funkcji w stacie\n    console.log(res, \"res po przekazaniu id\");\n    setSelectedEmployee(res.data\n     //Tutaj zaszeregowane będą dane dotyczą imienia, wieku itd.\n    );\n   });\n }\n\n const saveEmployeeHandler = () => {\n  // obiekt JavaScriptowy (pracownik) do zapisu\n  const employeeToSave = {\n   \"name\": \"Tomek123\",\n   \"salary\": \"4500\",\n   \"age\": \"25\"\n  }\n  // Żądanie POST\n  fetch(\"http://dummy.restapiexample.com/api/v1/create\",\n   {\n    method: \"POST\",\n    // headers: {\n    //   'Content-Type': 'application/json',\n    // },\n    body: employeeToSave//Dane które będziemy zapisywać,\n    // Jak powinno wyglądać ciało obiektu JavaScriptowego\n   })\n   .then(res => {\n    return res.json();\n   })\n   .then(res => console.log(res));\n }\n\n const deleteEmployeeHandler = () => {\n  // Będzie wysyłało zapytanie http z id na sztywno wpisanym w kodzie\n  const id = 2; // Stała id obiektu do usunięcia\n  fetch(\"http://dummy.restapiexample.com/api/v1/delete/\" + id, {\n   method: 'DELETE'\n  })\n   .then(res => res.json())\n   .then(res => console.log(res))\n   .catch(err => console.log(err))\n }\n // Sprawdzenie aktualnej wartości selectedEmployee, jeżeli będzie różna od zera , to będzie tworzony komponent EmplyeeDetails\n if (selectedEmployee !== null) {\n  return (\n   <EmployeeDetails\n    name={selectedEmployee.employee_name}\n    salary={selectedEmployee.employee_salary}\n    age={selectedEmployee.employee_age}\n   />)\n }\n\n return (\n  // W <Employees/> odwołuje się do stat-a employess\n  // Dopóki żadne pracownik nie zostanie wybrany będzie wyświetlany null ze stat-a\n  // \"saveEmployeeHandler\" Przycisk który na sztywno wpisuje dane pracownika w kod\n  <main className='t-site-header'>\n   <section className='o-container'>\n    {selectedEmployee}\n    <h1 className='c-heading c-heading--level1 c-heading--white'>Employees</h1>\n\n    <Employees employees={employees} showSelectedEmployee={showSelectedEmployeeHandler} />\n    <div className='t-post-list'>\n     <button onClick={saveEmployeeHandler} className='c-btn c-btn--accent'>Save Employee</button>\n     <span className=\"t-post-list__divider\">OR</span>\n     <button onClick={deleteEmployeeHandler} className='c-btn c-btn--outline'>Delete Employee</button>\n    </div>\n   </section>\n  </main>\n  // W propsach przekazywana jest metoda showSelectedEmployeeHandler nazwa propsa to: 'showSelectedEmployee' \n  // metoda showSelectedEmployeeHandler przekazywana jest do komponentu employees\n );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}