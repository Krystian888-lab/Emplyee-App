{"ast":null,"code":"var _jsxFileName = \"/home/krystian/CodersLab_JavaScript_Brudnopis/Emplyee-App/src/containers/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport '../dev-assets/style.scss';\nimport Employees from '../components/Employees/Employees';\nimport EmployeeDetails from '../components/Employees/EmployeeDetails/EmployeeDetails';\nimport Fetch from \"./Fetch\"; // Pobieranie danych z komponetu Reacta wymaga zastosaowania zaczepów useState, useEffect\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  // Zaczep useState służy do przechowywania odpowiedzi w danych \n\n  /*#__PURE__*/\n  _jsxDEV(Fetch, {\n    uri: (\"http://dummy.restapiexample.com/api/v1/employees\", {\n      method: 'GET'\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }, this); // Metoda która będzie się wywoływała po wciśnięciu jednego pracownika (wciśnięciu jednego przycisku), przekazywane jest do niej id bo endpoint wymaga id\n\n\n  const showSelectedEmployeeHandler = id => {\n    console.log(\"Employee nr: \" + id);\n    fetch(\"http://dummy.restapiexample.com/api/v1/employee/\" + id).then(res => {\n      return res.json();\n    }).then(res => {\n      // po przekazaniu argumentu z żądania metoda then określa co ma się stać kiedy otrzyma odpowiedź, która po otrzymaniu przypiszemy do funkcji w stacie\n      console.log(res, \"res po przekazaniu id\");\n      setSelectedEmployee(res.data //Tutaj zaszeregowane będą dane dotyczą imienia, wieku itd.\n      );\n    });\n  };\n\n  const saveEmployeeHandler = () => {\n    // obiekt JavaScriptowy (pracownik) do zapisu\n    const employeeToSave = {\n      \"name\": \"Tomek123\",\n      \"salary\": \"4500\",\n      \"age\": \"25\"\n    }; // Żądanie POST\n\n    fetch(\"http://dummy.restapiexample.com/api/v1/create\", {\n      method: \"POST\",\n      // headers: {\n      //   'Content-Type': 'application/json',\n      // },\n      body: employeeToSave //Dane które będziemy zapisywać,\n      // Jak powinno wyglądać ciało obiektu JavaScriptowego\n\n    }).then(res => {\n      return res.json();\n    }).then(res => console.log(res));\n  };\n\n  const deleteEmployeeHandler = () => {\n    // Będzie wysyłało zapytanie http z id na sztywno wpisanym w kodzie\n    const id = 2; // Stała id obiektu do usunięcia\n\n    fetch(\"http://dummy.restapiexample.com/api/v1/delete/\" + id, {\n      method: 'DELETE'\n    }).then(res => res.json()).then(res => console.log(res)).catch(err => console.log(err));\n  }; // Sprawdzenie aktualnej wartości selectedEmployee, jeżeli będzie różna od zera , to będzie tworzony komponent EmplyeeDetails\n\n\n  if (selectedEmployee !== null) {\n    return /*#__PURE__*/_jsxDEV(EmployeeDetails, {\n      name: selectedEmployee.employee_name,\n      salary: selectedEmployee.employee_salary,\n      age: selectedEmployee.employee_age\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 11\n    }, this);\n  }\n\n  return (\n    /*#__PURE__*/\n    // W <Employees/> odwołuje się do stat-a employess\n    // Dopóki żadne pracownik nie zostanie wybrany będzie wyświetlany null ze stat-a\n    // \"saveEmployeeHandler\" Przycisk który na sztywno wpisuje dane pracownika w kod\n    _jsxDEV(\"main\", {\n      className: \"t-site-header\",\n      children: /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"o-container\",\n        children: [selectedEmployee, /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"c-heading c-heading--level1 c-heading--white\",\n          children: \"Employees\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Employees, {\n          employees: employees,\n          showSelectedEmployee: showSelectedEmployeeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"t-post-list\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: saveEmployeeHandler,\n            className: \"c-btn c-btn--accent\",\n            children: \"Save Employee\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"t-post-list__divider\",\n            children: \"OR\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: deleteEmployeeHandler,\n            className: \"c-btn c-btn--outline\",\n            children: \"Delete Employee\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 11\n    }, this) // W propsach przekazywana jest metoda showSelectedEmployeeHandler nazwa propsa to: 'showSelectedEmployee' \n    // metoda showSelectedEmployeeHandler przekazywana jest do komponentu employees\n\n  );\n};\n\n_c = App;\nexport default App();\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/krystian/CodersLab_JavaScript_Brudnopis/Emplyee-App/src/containers/App.js"],"names":["React","useState","useEffect","Employees","EmployeeDetails","Fetch","App","method","showSelectedEmployeeHandler","id","console","log","fetch","then","res","json","setSelectedEmployee","data","saveEmployeeHandler","employeeToSave","body","deleteEmployeeHandler","catch","err","selectedEmployee","employee_name","employee_salary","employee_age","employees"],"mappings":"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","sourcesContent":["import React, {useState, useEffect } from 'react';\nimport '../dev-assets/style.scss';\nimport Employees from '../components/Employees/Employees';\nimport EmployeeDetails from '../components/Employees/EmployeeDetails/EmployeeDetails';\n\nimport Fetch from \"./Fetch\";\n// Pobieranie danych z komponetu Reacta wymaga zastosaowania zaczepów useState, useEffect\n\n\n  const App = () => {\n    // Zaczep useState służy do przechowywania odpowiedzi w danych \n    <Fetch\n    uri={\"http://dummy.restapiexample.com/api/v1/employees\" , {\n      method: 'GET',\n      \n    } }\n    />\n  // Metoda która będzie się wywoływała po wciśnięciu jednego pracownika (wciśnięciu jednego przycisku), przekazywane jest do niej id bo endpoint wymaga id\n  const showSelectedEmployeeHandler = (id) => {\n    console.log(\"Employee nr: \" + id);\n    fetch(\"http://dummy.restapiexample.com/api/v1/employee/\" + id)\n    .then(res => {\n      return res.json()\n    })\n    .then(res => {\n      // po przekazaniu argumentu z żądania metoda then określa co ma się stać kiedy otrzyma odpowiedź, która po otrzymaniu przypiszemy do funkcji w stacie\n      console.log(res, \"res po przekazaniu id\");\n      setSelectedEmployee(res.data\n        //Tutaj zaszeregowane będą dane dotyczą imienia, wieku itd.\n        );\n      });\n    }\n    \n    const saveEmployeeHandler = () => {\n      // obiekt JavaScriptowy (pracownik) do zapisu\n      const employeeToSave = {\n        \"name\": \"Tomek123\",\n        \"salary\": \"4500\",\n        \"age\": \"25\"\n      }\n      // Żądanie POST\n      fetch(\"http://dummy.restapiexample.com/api/v1/create\",\n      {\n        method: \"POST\",\n        // headers: {\n          //   'Content-Type': 'application/json',\n          // },\n          body: employeeToSave//Dane które będziemy zapisywać,\n          // Jak powinno wyglądać ciało obiektu JavaScriptowego\n        })\n        .then(res => {\n          return res.json();\n        })\n        .then(res => console.log(res));\n      }\n      \n      const deleteEmployeeHandler = () => {\n        // Będzie wysyłało zapytanie http z id na sztywno wpisanym w kodzie\n        const id = 2; // Stała id obiektu do usunięcia\n        fetch(\"http://dummy.restapiexample.com/api/v1/delete/\" + id, {\n          method: 'DELETE'\n        })  \n        .then(res => res.json())\n        .then(res => console.log(res))\n        .catch(err => console.log(err))\n      }\n      // Sprawdzenie aktualnej wartości selectedEmployee, jeżeli będzie różna od zera , to będzie tworzony komponent EmplyeeDetails\n      if(selectedEmployee !== null){ \n        \n        return (\n          <EmployeeDetails \n          name={selectedEmployee.employee_name}\n          salary={selectedEmployee.employee_salary}\n          age={selectedEmployee.employee_age}\n          /> )\n        }\n        \n        return (\n          // W <Employees/> odwołuje się do stat-a employess\n          // Dopóki żadne pracownik nie zostanie wybrany będzie wyświetlany null ze stat-a\n          // \"saveEmployeeHandler\" Przycisk który na sztywno wpisuje dane pracownika w kod\n          <main className='t-site-header'>\n        <section className='o-container'>\n        {selectedEmployee}\n          <h1 className='c-heading c-heading--level1 c-heading--white'>Employees</h1>\n    \n          <Employees employees={employees} showSelectedEmployee={showSelectedEmployeeHandler}/>\n            <div className='t-post-list'>\n              <button onClick={saveEmployeeHandler} className='c-btn c-btn--accent'>Save Employee</button>\n              <span className=\"t-post-list__divider\">OR</span>\n              <button onClick={deleteEmployeeHandler} className='c-btn c-btn--outline'>Delete Employee</button>\n            </div>\n          </section>\n        </main>\n        // W propsach przekazywana jest metoda showSelectedEmployeeHandler nazwa propsa to: 'showSelectedEmployee' \n        // metoda showSelectedEmployeeHandler przekazywana jest do komponentu employees\n        );\n        \n        \n      }\n        export default App ()\n        "]},"metadata":{},"sourceType":"module"}