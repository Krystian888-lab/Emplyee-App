{"ast":null,"code":"var _jsxFileName = \"/home/krystian/CodersLab_JavaScript_Brudnopis/Emplyee-App/src/containers/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Employees from '../components/Employees/Employees'; // import axios from 'axios';\n\nimport EmployeeDetails from '../components/Employees/EmployeeDetails/EmployeeDetails'; // Pobieranie danych z komponetu Reacta wymaga zastosaowania zaczepów useState, useEffect\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  // Zaczep useState służy do przechowywania odpowiedzi w danych \n  const [employees, setEmployees] = useState([]);\n  const [selectedEmployee, setSelectedEmployee] = useState(null); // w SelectedEmployee przechowywana jest informacja o jednym konkretnym pracowniku, dopóki żaden nie zostanie wybrany będzie wyświetlany 'null'\n  // Zaczep useEffect służy do wykonania żądania\n\n  useEffect(() => {\n    // Na adres puszczam żądanie GET aby dostać listę z pracownikami, która będzie zapisywana w stacie App, która będzie przekazywana do komponentu <Employees/>, najpierw komponenty się wyrenderują a potem zostanie puszczone zapytanie HTTP, po otrzymaniu odpowiedzi asynchronicznie zaktualizuje się nasz stan\n    fetch('http://dummy.restapiexample.com/api/v1/employees', {\n      method: 'GET' // headers: {\n      //   'Content-Type': 'application/json'\n      // },\n      // body: JSON.stringify({\n      // })\n\n    }).then(res => res.json()).then().then(res => {\n      console.log(res);\n      console.log(res.data.data);\n      const employeeArray = res.data.data;\n      console.log(employeeArray); // W stałek employees zapisuje to co nam zwraca ta metoda\n\n      setEmployees(employeeArray); // Teraz pracownicy z  początkowego stanu tablicy 'useState' employees -> zostają przypsiani do stałej employeeArray\n    }).catch(error => console.log(error));\n  }); // Metoda która będzie się wywoływała po wciśnięciu jednego pracownika (wciśnięciu jednego przycisku), przekazywane jest do niej id bo endpoint wymaga id\n\n  const showSelectedEmployeeHandler = id => {\n    console.log(\"Employee nr: \" + id);\n    fetch(\"http://dummy.restapiexample.com/api/v1/employee/\" + id, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({})\n    }).then(res => {\n      res.json();\n    }).then(res => {\n      // po przekazaniu argumentu z żądania metoda then określa co ma się stać kiedy otrzyma odpowiedź, która po otrzymaniu przypiszemy do funkcji w stacie \n      setSelectedEmployee({\n        selectedEmployee: res.data.data //Tutaj zaszeregowane będą dane dotyczą imienia, wieku itd.\n\n      });\n    });\n  };\n\n  const saveEmployeeHandler = () => {\n    // obiekt JavaScriptowy (pracownik) do zapisu\n    const employeeToSave = {\n      \"name\": \"Tomek123\",\n      \"salary\": \"4500\",\n      \"age\": \"25\"\n    }; // Żądanie POST\n\n    fetch(\"http://dummy.restapiexample.com/api/v1/create\", {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: {\n        \"name\": \"test\",\n        \"salary\": \"123\",\n        \"age\": \"23\"\n      } //Dane które będziemy zapisywać,\n      // Jak powinno wyglądać ciało obiektu JavaScriptowego\n\n    }).then(response => {\n      console.log(response);\n    });\n  };\n\n  const deleteEmployeeHandler = () => {\n    // Będzie wysyłało zapytanie http z id na sztywno wpisanym w kodzie\n    const id = 2; // Stała id obiektu do usunięcia\n\n    fetch(\"http://dummy.restapiexample.com/api/v1/delete/\" + id, {\n      method: \"DELETE\"\n    }).then(r => r.json()).then(res => {\n      console.log(res);\n    }).catch(err => console.log(err));\n  }; // Sprawdzenie aktualnej wartości selectedEmployee, jeżeli będzie różna od zera , to będzie tworzony komponent EmplyeeDetails\n\n\n  if (selectedEmployee !== null) {\n    return selectedEmployee = /*#__PURE__*/_jsxDEV(EmployeeDetails, {\n      name: selectedEmployee.employee_name,\n      salary: selectedEmployee.employee_salary,\n      age: selectedEmployee.employee_age\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 24\n    }, this);\n  }\n\n  return (\n    /*#__PURE__*/\n    // W <Employees/> odwołuje się do stat-a employess\n    // Dopóki żadne pracownik nie zostanie wybrany będzie wyświetlany null ze stat-a\n    // \"saveEmployeeHandler\" Przycisk który na sztywno wpisuje dane pracownika w kod\n    _jsxDEV(\"div\", {\n      className: \"App\",\n      children: [selectedEmployee, /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Employees\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Employees, {\n        employees: employees,\n        showSelectedEmployee: showSelectedEmployeeHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: saveEmployeeHandler,\n        className: \"UpdateButton\",\n        children: \"Save Employee\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: deleteEmployeeHandler,\n        className: \"UpdateButton\",\n        children: \"Delete Employee\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this) // W propsach przekazywana jest metoda showSelectedEmployeeHandler nazwa propsa to: 'showSelectedEmployee' \n    // metoda showSelectedEmployeeHandler przekazywana jest do komponentu employees\n\n  );\n};\n\n_s(App, \"kLZeJOXXsMW1g5t7GqZIcKSw2as=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/krystian/CodersLab_JavaScript_Brudnopis/Emplyee-App/src/containers/App.js"],"names":["React","useState","useEffect","Employees","EmployeeDetails","App","employees","setEmployees","selectedEmployee","setSelectedEmployee","fetch","method","then","res","json","console","log","data","employeeArray","catch","error","showSelectedEmployeeHandler","id","headers","body","JSON","stringify","saveEmployeeHandler","employeeToSave","response","deleteEmployeeHandler","r","err","employee_name","employee_salary","employee_age"],"mappings":"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","sourcesContent":["import React, {useState, useEffect } from 'react';\nimport './App.css';\nimport Employees from '../components/Employees/Employees';\n// import axios from 'axios';\nimport EmployeeDetails from '../components/Employees/EmployeeDetails/EmployeeDetails';\n// Pobieranie danych z komponetu Reacta wymaga zastosaowania zaczepów useState, useEffect\n\nconst App = () => {\n  // Zaczep useState służy do przechowywania odpowiedzi w danych \n  const [employees, setEmployees] = useState([]);\n  const [selectedEmployee, setSelectedEmployee] = useState(null); // w SelectedEmployee przechowywana jest informacja o jednym konkretnym pracowniku, dopóki żaden nie zostanie wybrany będzie wyświetlany 'null'\n\n  // Zaczep useEffect służy do wykonania żądania\n  useEffect(()=> {   \n    // Na adres puszczam żądanie GET aby dostać listę z pracownikami, która będzie zapisywana w stacie App, która będzie przekazywana do komponentu <Employees/>, najpierw komponenty się wyrenderują a potem zostanie puszczone zapytanie HTTP, po otrzymaniu odpowiedzi asynchronicznie zaktualizuje się nasz stan\n    fetch('http://dummy.restapiexample.com/api/v1/employees', {\n      method: 'GET',\n      // headers: {\n      //   'Content-Type': 'application/json'\n      // },\n      // body: JSON.stringify({\n\n      // })\n    })\n    .then(res => res.json())\n    .then()\n    .then(res => {\n      console.log(res);\n      console.log(res.data.data);\n\n      const employeeArray = res.data.data;\n      console.log(employeeArray, )\n      // W stałek employees zapisuje to co nam zwraca ta metoda\n      setEmployees(employeeArray);\n      // Teraz pracownicy z  początkowego stanu tablicy 'useState' employees -> zostają przypsiani do stałej employeeArray\n    })\n    .catch(error => console.log(error))\n  })\n\n  // Metoda która będzie się wywoływała po wciśnięciu jednego pracownika (wciśnięciu jednego przycisku), przekazywane jest do niej id bo endpoint wymaga id\n  const showSelectedEmployeeHandler = (id) => {\n    console.log(\"Employee nr: \" + id);\n    fetch(\"http://dummy.restapiexample.com/api/v1/employee/\" + id , {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n      })\n    })\n    .then(res => {\n      res.json()\n    })\n    .then(res => {\n      // po przekazaniu argumentu z żądania metoda then określa co ma się stać kiedy otrzyma odpowiedź, która po otrzymaniu przypiszemy do funkcji w stacie \n      setSelectedEmployee({\n        selectedEmployee: res.data.data\n        //Tutaj zaszeregowane będą dane dotyczą imienia, wieku itd.\n      });\n    });\n  }\n\n  const saveEmployeeHandler = () => {\n    // obiekt JavaScriptowy (pracownik) do zapisu\n    const employeeToSave = {\n      \"name\": \"Tomek123\",\n      \"salary\": \"4500\",\n      \"age\": \"25\"\n    }\n    // Żądanie POST\n    fetch(\"http://dummy.restapiexample.com/api/v1/create\",\n    {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: {\"name\":\"test\",\"salary\":\"123\",\"age\":\"23\"},//Dane które będziemy zapisywać,\n      // Jak powinno wyglądać ciało obiektu JavaScriptowego\n    }\n      ).then(response => {\n      console.log(response);\n    });\n  }\n\n  const deleteEmployeeHandler = () => {\n    // Będzie wysyłało zapytanie http z id na sztywno wpisanym w kodzie\n    const id = 2; // Stała id obiektu do usunięcia\n    fetch(\"http://dummy.restapiexample.com/api/v1/delete/\" + id, {\n      method: \"DELETE\",\n    })  \n    .then(r => r.json())\n    .then(\n      res => {\n        console.log(res);\n      })\n      .catch(err => console.log(err))\n  }\n  // Sprawdzenie aktualnej wartości selectedEmployee, jeżeli będzie różna od zera , to będzie tworzony komponent EmplyeeDetails\n  if(selectedEmployee !== null){ \n    return (\n    selectedEmployee = <EmployeeDetails \n    name={selectedEmployee.employee_name}\n    salary={selectedEmployee.employee_salary}\n    age={selectedEmployee.employee_age}\n    /> )\n  }\n  return (\n\n// W <Employees/> odwołuje się do stat-a employess\n// Dopóki żadne pracownik nie zostanie wybrany będzie wyświetlany null ze stat-a\n      // \"saveEmployeeHandler\" Przycisk który na sztywno wpisuje dane pracownika w kod\n      <div className='App'> \n        {selectedEmployee}\n        <h1>Employees</h1>\n        <Employees employees={employees} showSelectedEmployee={showSelectedEmployeeHandler}/>\n        <button onClick={saveEmployeeHandler} className=\"UpdateButton\">Save Employee</button>\n        <button onClick={deleteEmployeeHandler} className=\"UpdateButton\">Delete Employee</button>\n      </div>\n        // W propsach przekazywana jest metoda showSelectedEmployeeHandler nazwa propsa to: 'showSelectedEmployee' \n        // metoda showSelectedEmployeeHandler przekazywana jest do komponentu employees\n    );\n  }\n\nexport default App;"]},"metadata":{},"sourceType":"module"}